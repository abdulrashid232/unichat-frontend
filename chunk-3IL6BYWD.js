import{C as a,N as u,Qa as d,Wa as v,e as h,g as p,i as g,j as s,o as n,w as c,z as i}from"./chunk-EMO2IYOT.js";var l=class r{TOKEN_KEY="unichat_token";getToken(){return localStorage.getItem(this.TOKEN_KEY)}setToken(t){localStorage.setItem(this.TOKEN_KEY,t)}removeToken(){localStorage.removeItem(this.TOKEN_KEY)}static \u0275fac=function(e){return new(e||r)};static \u0275prov=i({token:r,factory:r.\u0275fac,providedIn:"root"})};var b=class r{constructor(t,e,o){this.http=t;this.router=e;this.tokenService=o;this.loadStoredUserData()}API_URL="https://unichat-backend.onrender.com/api/auth";_currentUser=u(null);_isLoggedIn=u(!1);currentUserSubject=new p(null);currentUser$=this.currentUserSubject.asObservable();get isLoggedIn(){return this._isLoggedIn()}get isLoggedIn$(){return new h(t=>(t.next(this._isLoggedIn()),{unsubscribe:()=>{}}))}get currentUser(){return this._currentUser()}loadStoredUserData(){this.tokenService.getToken()&&(this._isLoggedIn.set(!0),this.getUser().pipe(n(e=>(console.error("Token validation failed:",e),this.tokenService.removeToken(),this._isLoggedIn.set(!1),this._currentUser.set(null),this.currentUserSubject.next(null),g(null)))).subscribe(e=>{e&&(this._currentUser.set(e),this._isLoggedIn.set(!0),this.currentUserSubject.next(e),console.log("User session restored:",e))}))}register(t,e,o,f){return this.http.post(`${this.API_URL}/register`,{username:t,email:e,password:o,university:f}).pipe(c(m=>this.handleAuthResponse(m)),n(this.handleError))}login(t,e){return this.http.post(`${this.API_URL}/login`,{email:t,password:e}).pipe(c(o=>this.handleAuthResponse(o)),n(this.handleError))}logout(){this.tokenService.removeToken(),this._currentUser.set(null),this._isLoggedIn.set(!1),this.currentUserSubject.next(null),this.router.navigateByUrl("/login")}getToken(){return this.tokenService.getToken()}getUser(){return this.tokenService.getToken()?this.http.get(`${this.API_URL}/profile`).pipe(n(e=>(e.status===401&&this.logout(),s(()=>e)))):s(()=>new Error("No authentication token found"))}handleAuthResponse(t){this.tokenService.setToken(t.token),this.getUser().subscribe(e=>{this._currentUser.set(e),this.currentUserSubject.next(e),console.log("User logged in:",e)}),this._isLoggedIn.set(!0)}handleError(t){let e="An unknown error occurred";return t.error instanceof ErrorEvent?e=`Error: ${t.error.message}`:e=t.error?.message||e,s(()=>new Error(e))}static \u0275fac=function(e){return new(e||r)(a(d),a(v),a(l))};static \u0275prov=i({token:r,factory:r.\u0275fac,providedIn:"root"})};export{l as a,b};
